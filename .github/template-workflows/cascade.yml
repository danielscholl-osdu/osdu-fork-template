name: Cascade Integration

on:
  workflow_dispatch:       # Allow manual trigger
    inputs:
      issue_number:
        description: 'GitHub issue number for the upstream sync (e.g., 123)'
        required: true
        type: 'string'

permissions:
  contents: write
  pull-requests: write
  issues: write

concurrency:
  group: cascade-${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: false  # Never cancel cascade operations

jobs:
  cascade-to-integration:
    name: "🔄 Cascade to Integration"
    if: github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    outputs:
      integration_success: ${{ steps.validate.outputs.success }}
      conflicts_found: ${{ steps.merge_upstream.outputs.conflicts }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GH_TOKEN }}

      - name: Configure Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Check Integration State
        id: check_state
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
        run: |
          # Fetch all branches to get latest state
          git fetch origin --prune
          
          # Check if fork_integration is ahead of main (integration in process)
          INTEGRATION_COMMITS=$(git rev-list --count origin/main..origin/fork_integration 2>/dev/null || echo "0")
          
          # Check for open release PRs to main
          RELEASE_PRS=$(gh pr list --base main --head "release/upstream-*" --json number,title,headRefName 2>/dev/null || echo "[]")
          RELEASE_PR_COUNT=$(echo "$RELEASE_PRS" | jq length)
          
          # Check for open conflict issues
          CONFLICT_ISSUES=$(gh issue list --label "conflict,cascade-blocked" --json number,title 2>/dev/null || echo "[]")
          CONFLICT_COUNT=$(echo "$CONFLICT_ISSUES" | jq length)
          
          if [ "$INTEGRATION_COMMITS" -gt 0 ] || [ "$RELEASE_PR_COUNT" -gt 0 ] || [ "$CONFLICT_COUNT" -gt 0 ]; then
            echo "::notice::Integration pipeline busy - cannot start new cascade"
            echo "  - fork_integration is $INTEGRATION_COMMITS commits ahead of main"
            echo "  - $RELEASE_PR_COUNT release PRs open to main"
            echo "  - $CONFLICT_COUNT conflict issues blocking pipeline"
            
            # Track held upstream changes
            HELD_ISSUE=$(gh issue list --label "upstream-held" --json number,title 2>/dev/null | jq -r '.[0].number // empty')
            
            if [ -n "$HELD_ISSUE" ]; then
              # Update existing held issue
              echo "::notice::Updating existing upstream-held issue #$HELD_ISSUE"
              gh issue comment "$HELD_ISSUE" --body "🔄 **Additional upstream changes detected** - $(date '+%Y-%m-%d %H:%M:%S UTC')
              
              Integration pipeline still busy:
              - fork_integration: $INTEGRATION_COMMITS commits ahead of main
              - Release PRs pending: $RELEASE_PR_COUNT
              - Conflict issues: $CONFLICT_COUNT
              
              These upstream changes will be processed once current integration completes."
            else
              # Create new held issue
              echo "::notice::Creating new upstream-held tracking issue"
              gh issue create \
                --title "🚫 Upstream Changes Held - Integration Pipeline Busy" \
                --body "Upstream changes are being held because integration is currently in progress.
                
              **Current Pipeline Status:**
              - fork_integration: $INTEGRATION_COMMITS commits ahead of main
              - Release PRs pending: $RELEASE_PR_COUNT  
              - Conflict issues blocking: $CONFLICT_COUNT
              
              **Held Changes:**
              - $(date '+%Y-%m-%d'): Latest upstream sync detected
              
              **Next Steps:**
              - Complete current integration to main
              - Process held upstream changes automatically
              - Monitor for cascade completion
              
              This issue will be updated as additional upstream changes accumulate." \
                --label "upstream-held,integration-blocked,human-required"
            fi
            
            echo "integration_in_process=true" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          # Check if we have an upstream-held issue to update
          HELD_ISSUE=$(gh issue list --label "upstream-held" --json number 2>/dev/null | jq -r '.[0].number // empty')
          if [ -n "$HELD_ISSUE" ]; then
            echo "::notice::Integration cleared, updating held issue #$HELD_ISSUE"
            gh issue comment "$HELD_ISSUE" --body "✅ **Integration pipeline cleared** - $(date '+%Y-%m-%d %H:%M:%S UTC')
            
            Processing held upstream changes now. This issue will be closed when cascade completes successfully."
          fi
          
          echo "::notice::Integration pipeline clear - proceeding with cascade"
          echo "integration_in_process=false" >> $GITHUB_OUTPUT

      - name: Update tracking issue - cascade started
        if: steps.check_state.outputs.integration_in_process == 'false'
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
        run: |
          # Use the provided issue number from workflow input
          ISSUE_NUMBER="${{ github.event.inputs.issue_number }}"
          
          if [ -n "$ISSUE_NUMBER" ]; then
            echo "Updating tracking issue #$ISSUE_NUMBER - cascade started"
            
            # Update labels: remove human-required, add cascade-active
            gh issue edit "$ISSUE_NUMBER" \
              --remove-label "human-required" \
              --add-label "cascade-active"
            
            # Add progress comment
            gh issue comment "$ISSUE_NUMBER" --body "🚀 **Cascade Integration Started** - $(date -u +%Y-%m-%dT%H:%M:%SZ)
            
            Integration workflow has been triggered and is now processing upstream changes.
            
            **Status:** Merging \`fork_upstream\` → \`fork_integration\` → \`main\`
            **Workflow:** [View Progress](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})"
          else
            echo "No tracking issue found - cascade may have been triggered independently"
          fi

      - name: Merge main into fork_integration
        if: steps.check_state.outputs.integration_in_process == 'false'
        run: |
          # Fetch all branches
          git fetch origin --prune
          
          # Checkout fork_integration
          git checkout fork_integration
          
          # Merge latest from main to preserve local changes
          echo "Merging main into fork_integration to preserve local changes..."
          if git merge origin/main --no-edit; then
            echo "✅ Successfully merged main into fork_integration"
          else
            echo "::error::Failed to merge main into fork_integration"
            echo "This indicates conflicts between main and integration branches"
            echo "Manual intervention required to resolve conflicts"
            exit 1
          fi

      - name: Merge upstream into fork_integration
        id: merge_upstream
        if: steps.check_state.outputs.integration_in_process == 'false'
        run: |
          # Merge fork_upstream into fork_integration
          echo "Merging upstream changes into fork_integration..."
          CONFLICTS_FOUND=false
          
          if git merge origin/fork_upstream --no-edit; then
            echo "✅ Clean merge of upstream changes achieved"
          else
            # Check if there are unresolved conflicts
            if git status --porcelain | grep -q "^UU\|^AA\|^DD"; then
              echo "::warning::Merge conflicts detected"
              CONFLICTS_FOUND=true
              
              # List conflicted files
              echo "Conflicted files:"
              git diff --name-only --diff-filter=U | tee conflicted_files.txt
              
              # Create conflict resolution issue
              CONFLICT_BODY="Upstream merge conflicts detected in fork_integration branch.
              
              **Conflicted Files:**
              \`\`\`
              $(cat conflicted_files.txt)
              \`\`\`
              
              **Next Steps:**
              1. Checkout the fork_integration branch locally
              2. Resolve conflicts in the listed files
              3. Commit and push the resolution
              4. The cascade will automatically continue once conflicts are resolved
              
              **SLA:** 48 hours for resolution"
              
              gh issue create \
                --title "🚨 Cascade Conflicts: Manual Resolution Required - $(date +%Y-%m-%d)" \
                --body "$CONFLICT_BODY" \
                --label "conflict,cascade-blocked,high-priority,human-required"
              
              # Update tracking issue
              TRACKING_ISSUE="${{ github.event.inputs.issue_number }}"
              if [ -n "$TRACKING_ISSUE" ]; then
                gh issue edit "$TRACKING_ISSUE" \
                  --remove-label "cascade-active" \
                  --add-label "cascade-blocked"
                
                gh issue comment "$TRACKING_ISSUE" --body "🚨 **Conflicts Detected** - $(date -u +%Y-%m-%dT%H:%M:%SZ)
                
                Merge conflicts were detected during integration. A separate conflict resolution issue has been created.
                
                **Status:** Cascade blocked - manual conflict resolution required
                **SLA:** 48 hours for resolution"
              fi
              
              echo "conflicts=true" >> $GITHUB_OUTPUT
              exit 1
            else
              echo "✅ Merge completed with automatic resolution"
            fi
          fi
          
          echo "conflicts=false" >> $GITHUB_OUTPUT

      - name: Push integration changes
        if: steps.check_state.outputs.integration_in_process == 'false' && steps.merge_upstream.outputs.conflicts == 'false'
        run: |
          # Push the updated fork_integration
          git push origin fork_integration
          echo "✅ Integration branch updated successfully"

      - name: Validate integration
        id: validate
        if: steps.check_state.outputs.integration_in_process == 'false' && steps.merge_upstream.outputs.conflicts == 'false'
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
        run: |
          echo "🔍 Running validation checks on integration branch..."
          
          # Basic validation - check if integration branch is ahead of main
          CHANGES=$(git rev-list --count origin/main..fork_integration)
          if [ "$CHANGES" = "0" ]; then
            echo "::warning::No changes to integrate"
            echo "success=false" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          echo "Found $CHANGES commits to integrate"
          
          # TODO: Add project-specific validation here
          # Examples:
          # - Build checks: mvn compile || npm run build
          # - Test suites: mvn test || npm test
          # - Lint checks: mvn checkstyle:check || npm run lint
          # - Security scans: mvn dependency:check || npm audit
          
          echo "✅ Basic validation passed"
          echo "success=true" >> $GITHUB_OUTPUT

      - name: Create validation status comment
        if: steps.check_state.outputs.integration_in_process == 'false'
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
        run: |
          if [ "${{ steps.merge_upstream.outputs.conflicts }}" = "true" ]; then
            echo "Conflicts detected - issue created for resolution"
          elif [ "${{ steps.validate.outputs.success }}" = "true" ]; then
            echo "✅ Integration validation passed - ready for cascade to main"
          else
            echo "❌ Integration validation failed - manual intervention required"
          fi

  cascade-to-main:
    name: "🎯 Cascade to Main"
    needs: cascade-to-integration
    if: >
      needs.cascade-to-integration.outputs.integration_success == 'true' &&
      needs.cascade-to-integration.outputs.conflicts_found == 'false'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GH_TOKEN }}

      - name: Configure Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Verify integration state
        id: verify_integration
        run: |
          # Fetch latest state
          git fetch origin --prune
          
          # Switch to fork_integration to get latest changes
          git checkout fork_integration
          
          # Compare fork_integration with main
          CHANGES=$(git rev-list --count origin/main..fork_integration)
          
          if [ "$CHANGES" = "0" ]; then
            echo "::warning::No changes to cascade from fork_integration to main"
            echo "needs_cascade=false" >> $GITHUB_OUTPUT
          else
            echo "Found $CHANGES commits ready to cascade to main"
            echo "needs_cascade=true" >> $GITHUB_OUTPUT
            
            # Verify integration branch is in good state
            if git diff --quiet HEAD origin/fork_integration; then
              echo "✅ Integration branch is clean and ready"
            else
              echo "::error::Integration branch has uncommitted changes"
              exit 1
            fi
          fi

      - name: Create main PR
        if: steps.verify_integration.outputs.needs_cascade == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
        run: |
          # Use fork_integration branch directly for the PR
          MAIN_BRANCH="fork_integration"
          
          # Ensure we're on fork_integration and it's up to date
          git checkout fork_integration
          
          # Push any updates to fork_integration
          git push origin $MAIN_BRANCH
          
          # Get commit summary
          COMMIT_SUMMARY=$(git log --pretty=format:"- %s" origin/main..HEAD | head -20)
          if [ $(git rev-list --count origin/main..HEAD) -gt 20 ]; then
            COMMIT_SUMMARY="${COMMIT_SUMMARY} ... and $(( $(git rev-list --count origin/main..HEAD) - 20 )) more commits"
          fi
          
          # Calculate diff size for auto-merge eligibility
          DIFF_LINES=$(git diff --stat origin/main..HEAD | tail -1 | awk '{print $4 + $6}' | tr -d ' ')
          if [[ -z "$DIFF_LINES" || ! "$DIFF_LINES" =~ ^[0-9]+$ ]]; then
            DIFF_LINES=0
          fi
          
          # Check for breaking changes
          # Check for breaking changes
          BREAKING_CHANGES=false
          if git log origin/main..HEAD --grep="BREAKING CHANGE" --grep="!:" --oneline | head -1 | grep -q .; then
            BREAKING_CHANGES=true
          fi
          
          # Create detailed PR body with commit summary
          PR_BODY="## 🚀 Upstream Integration Ready for Production
          
          This PR cascades validated upstream changes from the integration branch to main.
          
          **Integration Summary:**
          - Total commits: $(git rev-list --count origin/main..HEAD)
          - Diff size: ${DIFF_LINES} lines
          - Breaking changes: ${BREAKING_CHANGES}
          
          **Recent Changes:**
          ${COMMIT_SUMMARY}
          
          **Validation Status:** ✅ Passed
          **Conflicts:** ✅ Resolved
          **Ready for Production:** ✅ Yes"
          
          PR_URL=$(gh pr create \
            --base main \
            --head $MAIN_BRANCH \
            --title "🚀 Production Release: Upstream Integration - $(date +%Y-%m-%d)" \
            --body "$PR_BODY" \
            --label "upstream-sync,production-ready,cascade-active,validated,human-required")
          
          echo "Main PR created: $PR_URL"
          PR_NUMBER=$(basename $PR_URL)
          
          # Determine auto-merge eligibility
          if [[ "$DIFF_LINES" -lt 1000 ]] && [[ "$BREAKING_CHANGES" == "false" ]]; then
            echo "✅ PR eligible for auto-merge (diff: $DIFF_LINES lines, no breaking changes)"
            gh pr edit $PR_NUMBER --add-label "auto-merge-enabled"
            
            # Enable auto-merge after checks pass
            gh pr merge $PR_NUMBER --auto --squash --delete-branch || echo "Auto-merge enabled, waiting for checks"
          else
            echo "❌ Manual review required (diff: $DIFF_LINES lines, breaking changes: $BREAKING_CHANGES)"
            gh pr edit $PR_NUMBER --add-label "manual-review-required"
          fi
          
          # Update original tracking issue
          TRACKING_ISSUE="${{ github.event.inputs.issue_number }}"
          if [ -n "$TRACKING_ISSUE" ]; then
            gh issue edit "$TRACKING_ISSUE" \
              --remove-label "cascade-active" \
              --add-label "production-ready"
            
            gh issue comment "$TRACKING_ISSUE" --body "🎯 **Production PR Created** - $(date -u +%Y-%m-%dT%H:%M:%SZ)
            
            Integration completed successfully! Production PR has been created and is ready for final review.
            
            **Production PR:** $PR_URL
            **Diff Size:** ${DIFF_LINES} lines  
            **Breaking Changes:** ${BREAKING_CHANGES}
            **Auto-merge:** $([ "$DIFF_LINES" -lt 1000 ] && [ "$BREAKING_CHANGES" == "false" ] && echo "✅ Enabled" || echo "❌ Manual review required")
            
            **Final Steps:**
            1. Review and merge the production PR
            2. This issue will be closed when changes reach main"
          fi

          # Create tracking issue with detailed integration summary
          ISSUE_BODY="## 📦 Upstream Integration Cascade Complete
          
          **Production PR:** $PR_URL
          **Integration Status:** ✅ Validated and ready
          **Diff Size:** ${DIFF_LINES} lines
          **Breaking Changes:** ${BREAKING_CHANGES}
          **Commits:** $(git rev-list --count origin/main..HEAD)
          
          **Next Steps:**
          1. Review the production PR for final approval
          2. Merge to deploy upstream changes to production
          3. Monitor for any post-deployment issues
          
          **Timeline:**
          - Integration completed: $(date -u +%Y-%m-%dT%H:%M:%SZ)
          - Ready for production: $(date -u +%Y-%m-%dT%H:%M:%SZ)"
          
          gh issue create \
            --title "📦 Production Ready: Upstream Integration $(date +%Y-%m-%d)" \
            --body "$ISSUE_BODY" \
            --label "release-tracking,production-ready"
          
          # Close any upstream-held issues since cascade is now complete
          HELD_ISSUE=$(gh issue list --label "upstream-held" --json number 2>/dev/null | jq -r '.[0].number // empty')
          if [ -n "$HELD_ISSUE" ]; then
            echo "::notice::Closing upstream-held issue #$HELD_ISSUE - cascade complete"
            gh issue comment "$HELD_ISSUE" --body "✅ **Cascade completed successfully** - $(date '+%Y-%m-%d %H:%M:%S UTC')
            
            Production PR created: $PR_URL
            All held upstream changes have been processed and are ready for production deployment.
            
            Closing this tracking issue."
            gh issue close "$HELD_ISSUE"
          fi

  check-stale-conflicts:
    name: "⏰ Check Stale Conflicts"
    if: github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Check for stale conflict issues
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
        run: |
          # Find conflict issues older than 48 hours
          stale_issues=$(gh issue list \
            --label "conflict,cascade-blocked" \
            --json number,createdAt,title \
            --jq '.[] | select((now - (.createdAt | fromdateiso8601)) > 172800)')
          
          if [ -n "$stale_issues" ]; then
            echo "$stale_issues" | jq -r '.number' | while read issue_number; do
              # Create escalation issue
              gh issue create \
                --title "🚨 ESCALATION: Cascade conflicts unresolved for 48+ hours" \
                --body "Issue #$issue_number has unresolved conflicts blocking the cascade pipeline.
                
                **Action Required:** Resolve integration branch conflicts immediately
                **SLA Status:** EXCEEDED (48+ hours)
                **Impact:** Upstream changes cannot be integrated until resolved" \
                --label "escalation,high-priority,cascade-escalated,human-required"
              
              # Update issue with escalation notice
              gh issue comment $issue_number --body "⚠️ **SLA EXCEEDED:** This conflict has exceeded the 48-hour resolution SLA and has been escalated. Immediate action required."
              
              # Add escalation label to issue
              gh issue edit $issue_number --add-label "cascade-escalated"
            done
          else
            echo "No stale conflict issues found"
          fi

  cascade-failure-handler:
    name: "🚨 Handle Cascade Failure"
    if: failure()
    runs-on: ubuntu-latest
    needs: [cascade-to-integration, cascade-to-main]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Create failure issue
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
        run: |
          # Determine failure type
          if [ "${{ needs.cascade-to-integration.result }}" = "failure" ]; then
            FAILURE_TYPE="Integration Failure"
            FAILURE_DETAILS="The cascade-to-integration job failed during upstream merge or validation."
          elif [ "${{ needs.cascade-to-main.result }}" = "failure" ]; then
            FAILURE_TYPE="Main Cascade Failure"
            FAILURE_DETAILS="The cascade-to-main job failed during PR creation or main branch operations."
          else
            FAILURE_TYPE="Unknown Failure"
            FAILURE_DETAILS="An unexpected failure occurred in the cascade workflow."
          fi
          
          ISSUE_BODY="## 🚨 Cascade Pipeline Failure
          
          **Failure Type:** $FAILURE_TYPE
          **Workflow Run:** ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
          **Trigger Branch:** ${{ github.ref }}
          **Timestamp:** $(date -u +%Y-%m-%dT%H:%M:%SZ)
          
          **Details:** $FAILURE_DETAILS
          
          **Impact:** The cascade pipeline is blocked until this issue is resolved.
          
          **Next Steps:**
          1. Review the failed workflow logs
          2. Identify and fix the root cause
          3. Re-run the cascade workflow or manually complete the integration"

          gh issue create \
            --title "🚨 Cascade Pipeline Failure: $FAILURE_TYPE - $(date +%Y-%m-%d)" \
            --body "$ISSUE_BODY" \
            --label "cascade-failed,high-priority,human-required"