name: Post-Initialization Health Check

on:
  workflow_dispatch:
    inputs:
      issue_number:
        description: 'Issue number for progress updates'
        required: true
        type: string

permissions:
  contents: read
  issues: write

jobs:
  health-check:
    name: "üè• Repository Health Check"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Start health check
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          ISSUE_NUMBER: ${{ github.event.inputs.issue_number }}
        run: |
          cat << EOF | gh issue comment "$ISSUE_NUMBER" --body-file -
          üè• **Starting Repository Health Check**
          
          Now performing comprehensive validation of the initialized repository:
          - üîç Repository structure verification
          - üèóÔ∏è Full build validation (if Java project)
          - üß™ Unit test execution
          - üìã Configuration validation
          
          This may take several minutes...
          EOF

      - name: Verify repository structure
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          ISSUE_NUMBER: ${{ github.event.inputs.issue_number }}
        run: |
          echo "üîç **Verifying repository structure...**" | gh issue comment "$ISSUE_NUMBER" --body-file -
          
          # Check essential files and branches
          ISSUES=()
          
          # Check branches exist
          for branch in main fork_upstream fork_integration; do
            if ! git rev-parse --verify origin/$branch >/dev/null 2>&1; then
              ISSUES+=("‚ùå Missing branch: $branch")
            fi
          done
          
          # Check workflow environment
          if [ -f ".github/workflow.env" ]; then
            source .github/workflow.env
            if [ "$INITIALIZATION_COMPLETE" != "true" ]; then
              ISSUES+=("‚ùå Initialization not marked complete")
            fi
          else
            ISSUES+=("‚ùå Missing workflow environment file")
          fi
          
          # Report structure issues
          if [ ${#ISSUES[@]} -eq 0 ]; then
            echo "‚úÖ **Repository structure verified**" | gh issue comment "$ISSUE_NUMBER" --body-file -
          else
            {
              echo "‚ö†Ô∏è **Repository structure issues detected:**"
              printf '%s\n' "${ISSUES[@]}"
            } | gh issue comment "$ISSUE_NUMBER" --body-file -
          fi

      - name: Detect project type
        id: detect
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          ISSUE_NUMBER: ${{ github.event.inputs.issue_number }}
        run: |
          if [ -f "pom.xml" ] || [ -n "$(find . -name 'pom.xml' -type f)" ]; then
            echo "project_type=java" >> $GITHUB_OUTPUT
            echo "üìã **Detected Java/Maven project**" | gh issue comment "$ISSUE_NUMBER" --body-file -
          else
            echo "project_type=other" >> $GITHUB_OUTPUT
            echo "üìã **Detected non-Java project**" | gh issue comment "$ISSUE_NUMBER" --body-file -
          fi

      - name: Set up JDK
        if: steps.detect.outputs.project_type == 'java'
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: 'maven'

      - name: Cache Maven packages
        if: steps.detect.outputs.project_type == 'java'
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-m2-

      - name: Setup Maven Settings
        if: steps.detect.outputs.project_type == 'java'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          ISSUE_NUMBER: ${{ github.event.inputs.issue_number }}
        run: |
          mkdir -p ~/.m2
          if [ -f ".mvn/community-maven.settings.xml" ]; then
            cp .mvn/community-maven.settings.xml ~/.m2/settings.xml
            echo "üìã **Using community Maven settings**" | gh issue comment "$ISSUE_NUMBER" --body-file -
          else
            echo "üìã **Using default Maven settings**" | gh issue comment "$ISSUE_NUMBER" --body-file -
          fi

      - name: Full build validation
        if: steps.detect.outputs.project_type == 'java'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          ISSUE_NUMBER: ${{ github.event.inputs.issue_number }}
          MAVEN_USERNAME: ${{ secrets.OPENGROUP_MAVEN_USERNAME }}
          MAVEN_TOKEN: ${{ secrets.OPENGROUP_MAVEN_TOKEN }}
        run: |
          echo "üèóÔ∏è **Running full build validation...**" | gh issue comment "$ISSUE_NUMBER" --body-file -
          
          # Capture build output
          BUILD_OUTPUT_FILE=$(mktemp)
          BUILD_SUCCESS=false
          
          # Run full Maven build with timeout
          if timeout 1200 mvn clean install -B -Dmaven.test.failure.ignore=true 2>&1 | tee "$BUILD_OUTPUT_FILE"; then
            if grep -q "BUILD SUCCESS" "$BUILD_OUTPUT_FILE"; then
              BUILD_SUCCESS=true
              echo "‚úÖ **Full build completed successfully**" | gh issue comment "$ISSUE_NUMBER" --body-file -
            fi
          fi
          
          # Analyze test results
          if [ "$BUILD_SUCCESS" = true ]; then
            # Extract test summary
            if grep -q "Tests run:" "$BUILD_OUTPUT_FILE"; then
              TEST_SUMMARY=$(grep "Tests run:" "$BUILD_OUTPUT_FILE" | tail -1)
              echo "üß™ **Test Results:** $TEST_SUMMARY" | gh issue comment "$ISSUE_NUMBER" --body-file -
            fi
            
            # Check for any warnings
            if grep -qi "warning" "$BUILD_OUTPUT_FILE"; then
              echo "‚ö†Ô∏è **Build completed with warnings** - check build logs for details" | gh issue comment "$ISSUE_NUMBER" --body-file -
            fi
          else
            # Build failed - provide detailed guidance
            {
              echo "‚ùå **Full build validation failed**"
              echo ""
              echo "**Common issues and solutions:**"
              echo "- **Missing dependencies:** Check if all required Maven repositories are accessible"
              echo "- **Test failures:** Some upstream tests may be environment-specific"
              echo "- **Configuration issues:** Review upstream README for required setup steps"
              echo "- **Network issues:** Private repositories may need authentication"
              echo ""
              echo "**Recommended next steps:**"
              echo "1. Review the full build log in the Actions tab"
              echo "2. Check upstream repository's CI/CD status"
              echo "3. Verify all required secrets are configured"
              echo "4. Consider running builds locally to isolate issues"
              echo ""
              echo "**Note:** You can still develop with this repository, but builds will need attention."
            } | gh issue comment "$ISSUE_NUMBER" --body-file -
          fi
          
          # Clean up
          rm -f "$BUILD_OUTPUT_FILE"

      - name: Non-Java project validation
        if: steps.detect.outputs.project_type == 'other'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          ISSUE_NUMBER: ${{ github.event.inputs.issue_number }}
        run: |
          {
            echo "‚ÑπÔ∏è **Non-Java project detected**"
            echo ""
            echo "**Manual validation recommended:**"
            echo "- Check if the project has specific build requirements"
            echo "- Review upstream README for setup instructions"
            echo "- Verify any configuration files are present"
            echo "- Test basic functionality according to project documentation"
          } | gh issue comment "$ISSUE_NUMBER" --body-file -

      - name: Generate health report
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          ISSUE_NUMBER: ${{ github.event.inputs.issue_number }}
        run: |
          # Get final status from previous steps
          cat << EOF | gh issue comment "$ISSUE_NUMBER" --body-file -
          üìã **Repository Health Check Complete**
          
          Your fork management repository has been validated! 
          
          **What was checked:**
          ‚úÖ Repository structure and branch configuration
          ‚úÖ Workflow environment setup
          ‚úÖ Build system validation (if applicable)
          ‚úÖ Test execution (if applicable)
          
          **Repository is ready for development!**
          
          üöÄ **Next Steps:**
          1. **Start developing** by creating feature branches from \`main\`
          2. **Review workflows** in the Actions tab to understand automation
          3. **Customize** repository settings as needed for your team
          4. **Monitor** the daily upstream sync process
          
          Happy coding! The repository is fully initialized and validated.
          EOF
          
          # Close the issue as completed
          gh issue close "$ISSUE_NUMBER" --reason completed