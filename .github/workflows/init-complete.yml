name: Initialize Complete

on:
  issue_comment:
    types: [created]

permissions:
  contents: write
  actions: write
  issues: write
  pull-requests: write

concurrency:
  group: ${{ github.workflow }}-${{ github.event.issue.number }}
  cancel-in-progress: false

jobs:
  validate_and_setup:
    name: Validate and setup repository
    if: |
      github.event.issue.state == 'open' &&
      contains(github.event.issue.labels.*.name, 'initialization') &&
      github.event.comment.user.login != 'github-actions[bot]'
    runs-on: ubuntu-latest
    outputs:
      upstream_repo: ${{ steps.validate.outputs.upstream_repo }}
      should_proceed: ${{ steps.validate.outputs.should_proceed }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Validate repository input
        id: validate
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Get the comment body and clean it
          COMMENT="${{ github.event.comment.body }}"
          REPO=$(echo "$COMMENT" | tr -d '[:space:]' | head -1)
          
          echo "Processing comment: $REPO"
          
          # Validate repository format
          if [[ "$REPO" == http* ]]; then
            # GitLab URL format validation
            if ! [[ "$REPO" =~ ^https?://[^/]+/[^/]+/[^/]+(/.*)?$ ]]; then
              echo "❌ Invalid GitLab URL format: $REPO" | gh issue comment "${{ github.event.issue.number }}" --body-file -
              echo "should_proceed=false" >> $GITHUB_OUTPUT
              exit 0
            fi
          else
            # GitHub owner/repo format validation
            if ! [[ "$REPO" =~ ^[A-Za-z0-9_.-]+/[A-Za-z0-9_.-]+$ ]]; then
              echo "❌ Invalid repository format. Expected 'owner/repo' but got '$REPO'" | gh issue comment "${{ github.event.issue.number }}" --body-file -
              echo "should_proceed=false" >> $GITHUB_OUTPUT
              exit 0
            fi
          fi
          
          echo "upstream_repo=$REPO" >> $GITHUB_OUTPUT
          echo "should_proceed=true" >> $GITHUB_OUTPUT
          
          # Post confirmation
          cat << EOF | gh issue comment "${{ github.event.issue.number }}" --body-file -
          ✅ **Repository validated:** \`$REPO\`

          🔄 **Starting initialization process...**

          This will take a few minutes. I'll update you with progress!
          EOF

  setup_repository:
    name: Setup repository structure
    needs: validate_and_setup
    if: needs.validate_and_setup.outputs.should_proceed == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Configure Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git config pull.rebase false

      - name: Setup upstream repository
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          UPSTREAM_REPO: ${{ needs.validate_and_setup.outputs.upstream_repo }}
        run: |
          
          # Convert to URL format
          if [[ "$UPSTREAM_REPO" == http* ]]; then
            REPO_URL="$UPSTREAM_REPO.git"
          else
            REPO_URL="https://github.com/$UPSTREAM_REPO.git"
          fi
          
          # Add upstream remote
          git remote add upstream $REPO_URL
          git fetch upstream --prune --tags
          
          # List available branches for debugging
          
          # Get all branches from upstream
          BRANCHES=$(git branch -r | grep upstream | sed 's/upstream\///' | grep -v HEAD | tr '\n' ' ')
          echo "Available branches: $BRANCHES"
          
          # Determine default branch
          if git rev-parse --verify upstream/main >/dev/null 2>&1; then
            DEFAULT_BRANCH="main"
          elif git rev-parse --verify upstream/master >/dev/null 2>&1; then
            DEFAULT_BRANCH="master"
          else
            # Try to detect default branch from HEAD
            DEFAULT_BRANCH=$(git symbolic-ref refs/remotes/upstream/HEAD 2>/dev/null | sed 's@^refs/remotes/upstream/@@')
            
            if [ -z "$DEFAULT_BRANCH" ]; then
              # Last resort: check common branch names
              for branch in develop development prod production release stable; do
                if git rev-parse --verify upstream/$branch >/dev/null 2>&1; then
                  DEFAULT_BRANCH="$branch"
                  break
                fi
              done
            fi
            
            if [ -z "$DEFAULT_BRANCH" ]; then
              echo "❌ **Error:** Could not determine default branch in upstream repository" | gh issue comment "${{ github.event.issue.number }}" --body-file -
              echo "Available branches found: $BRANCHES" | gh issue comment "${{ github.event.issue.number }}" --body-file -
              echo "Please ensure the upstream repository has at least one branch." | gh issue comment "${{ github.event.issue.number }}" --body-file -
              exit 1
            fi
          fi
          
          echo "✅ Using default branch: $DEFAULT_BRANCH" | gh issue comment "${{ github.event.issue.number }}" --body-file -
          
          echo "DEFAULT_BRANCH=$DEFAULT_BRANCH" >> $GITHUB_ENV
          echo "UPSTREAM_URL=$REPO_URL" >> $GITHUB_ENV

      - name: Create branch structure
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Check if this is an OSDU partition repository (for debugging)
          if [[ "${{ needs.validate_and_setup.outputs.upstream_repo }}" == *"partition"* ]]; then
            # List release branches for OSDU repos (internal logging only)
            RELEASE_BRANCHES=$(git branch -r | grep upstream/release | sed 's/upstream\///' | tr '\n' ', ')
            if [ -n "$RELEASE_BRANCHES" ]; then
              echo "Debug: Found release branches: $RELEASE_BRANCHES"
            fi
          fi
          
          # Create fork_upstream from upstream's default branch
          git checkout -b fork_upstream upstream/$DEFAULT_BRANCH
          git push -u origin fork_upstream
          
          # Create fork_integration from fork_upstream
          git checkout -b fork_integration fork_upstream
          
          # Copy files according to sync configuration
          # First, get the sync configuration
          git checkout main -- .github/sync-config.json
          
          # Copy directories that should be synced entirely
          DIRECTORIES=$(jq -r '.sync_rules.directories[] | .path' .github/sync-config.json)
          for dir in $DIRECTORIES; do
            echo "Copying directory: $dir"
            git checkout main -- "$dir/" || echo "Directory $dir not found, skipping"
          done
          
          # Copy individual files
          FILES=$(jq -r '.sync_rules.files[] | .path' .github/sync-config.json)
          for file in $FILES; do
            echo "Copying file: $file"
            git checkout main -- "$file" || echo "File $file not found, skipping"
          done
          
          # Copy essential workflows only (not template-only workflows)
          mkdir -p .github/workflows
          WORKFLOWS=$(jq -r '.sync_rules.workflows.essential[] | .path' .github/sync-config.json)
          for workflow in $WORKFLOWS; do
            echo "Copying essential workflow: $workflow"
            git checkout main -- "$workflow" || echo "Workflow $workflow not found, skipping"
          done
          
          # Add template remote to be able to track template updates
          TEMPLATE_REPO_URL="${{ vars.TEMPLATE_REPO_URL || 'https://github.com/danielscholl-osdu/osdu-fork-template.git' }}"
          git remote add template "$TEMPLATE_REPO_URL" || true
          git fetch template main --depth=1
          
          # Initialize tracking files
          TRACKING_FILES=$(jq -r '.sync_rules.tracking_files[] | select(.auto_create == true) | .path' .github/sync-config.json)
          for tracking_file in $TRACKING_FILES; do
            echo "Initializing tracking file: $tracking_file"
            mkdir -p "$(dirname "$tracking_file")"
            
            # Special handling for template sync commit file
            if [[ "$tracking_file" == ".github/.template-sync-commit" ]]; then
              # We need to find the template commit that matches our current template files
              # Since we just created this from the template, we can use the template's current HEAD
              # But ideally we'd want the exact commit this was forked from
              # For now, use the current template HEAD as baseline (may include some changes we already have)
              TEMPLATE_BASELINE=$(git rev-parse template/main)
              echo "$TEMPLATE_BASELINE" > "$tracking_file"
              echo "Initialized $tracking_file with template commit: $TEMPLATE_BASELINE"
            else
              # For other tracking files, create empty
              echo "" > "$tracking_file"
            fi
            
            git add "$tracking_file"
          done
          
          # Commit workflow files (no need for workflow.env anymore)
          git add .github
          git commit -m "chore: copy workflows from main branch"
          git push -u origin fork_integration

      - name: Merge to main and setup secrets
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
        run: |
          # Merge fork_integration into main with conflict resolution
          git checkout main
          
          # Try merge with unrelated histories, preferring fork_integration changes
          if ! git merge fork_integration --allow-unrelated-histories --no-ff -X theirs -m "chore: complete repository initialization"; then
            echo "⚠️ **Merge conflicts detected, resolving automatically...**" | gh issue comment "${{ github.event.issue.number }}" --body-file -
            
            # If there are still conflicts even with -X theirs, explicitly take fork_integration version
            git status --porcelain | grep -E '^(DD|AU|UD|UA|DU|AA|UU)' | cut -c4- | while read -r file; do
              echo "Resolving conflict in $file - using upstream version"
              # Use the version from fork_integration (which comes from upstream)
              git checkout --theirs "$file"
              git add "$file"
            done
            
            # Complete the merge
            git commit -m "chore: complete repository initialization (conflicts resolved using upstream versions)"
          fi
          
          # Clean up template files using sync configuration
          echo "Cleaning up template-specific files..."
          
          # Read cleanup rules from sync configuration
          SYNC_CONFIG=".github/sync-config.json"
          
          # Remove directories specified in cleanup rules
          CLEANUP_DIRS=$(jq -r '.cleanup_rules.directories[]? | .path' "$SYNC_CONFIG" 2>/dev/null || echo "")
          for dir in $CLEANUP_DIRS; do
            if [ -d "$dir" ]; then
              echo "Removing template directory: $dir"
              rm -rf "$dir"
            fi
          done
          
          # Remove files specified in cleanup rules
          CLEANUP_FILES=$(jq -r '.cleanup_rules.files[]? | .path' "$SYNC_CONFIG" 2>/dev/null || echo "")
          for file in $CLEANUP_FILES; do
            if [ -f "$file" ]; then
              echo "Removing template file: $file"
              rm -f "$file"
            fi
          done
          
          # Remove workflows specified in cleanup rules
          CLEANUP_WORKFLOWS=$(jq -r '.cleanup_rules.workflows[]? | .path' "$SYNC_CONFIG" 2>/dev/null || echo "")
          for workflow in $CLEANUP_WORKFLOWS; do
            if [ -f "$workflow" ]; then
              echo "Removing initialization workflow: $workflow"
              rm -f "$workflow"
            fi
          done
          
          # Add cleanup to the merge commit if there are changes
          git add -A
          if ! git diff --staged --quiet; then
            git commit --amend --no-edit
          fi
          
          git push origin main
          
          # Trigger validation workflow after cleanup push (with small delay for git push to complete)
          
          # Wait a moment for the push to be fully processed
          sleep 5
          
          if [ -n "$GH_TOKEN" ]; then
            # Trigger validation workflow with initialization status
            GH_TOKEN=$GH_TOKEN gh workflow run validate.yml \
              -f post_init=true \
              -f initialization_complete=true
            
            # Validation workflow triggered - will run automatically
          else
            # Fallback: manual instruction
            echo "⚠️ **Manual validation recommended:** Please run the 'Validation' workflow manually from the Actions tab." | gh issue comment "${{ github.event.issue.number }}" --body-file -
          fi
          
          # Store upstream repo URL as secret using PAT if available
          SECRETS_SUCCESS=true
          echo "Debug: UPSTREAM_URL value is: '$UPSTREAM_URL'"
          
          if [ -z "$UPSTREAM_URL" ]; then
            echo "⚠️ **Error:** UPSTREAM_URL is empty. Cannot set secret." | gh issue comment "${{ github.event.issue.number }}" --body-file -
            SECRETS_SUCCESS=false
          elif [ -n "$GH_TOKEN" ]; then
            echo "Setting UPSTREAM_REPO_URL secret to: $UPSTREAM_URL"
            if ! GH_TOKEN=$GH_TOKEN gh secret set UPSTREAM_REPO_URL --body "$UPSTREAM_URL"; then
              echo "⚠️ **Warning:** Failed to set UPSTREAM_REPO_URL secret" | gh issue comment "${{ github.event.issue.number }}" --body-file -
              SECRETS_SUCCESS=false
            fi
          else
            echo "⚠️ **Warning:** Unable to set UPSTREAM_REPO_URL secret. Please set it manually or provide a GH_TOKEN secret with appropriate permissions." | gh issue comment "${{ github.event.issue.number }}" --body-file -
            SECRETS_SUCCESS=false
          fi
          
          # Set repository variable for initialization status
          if [ -n "$GH_TOKEN" ]; then
            if ! GH_TOKEN=$GH_TOKEN gh variable set INITIALIZATION_COMPLETE --body "true"; then
              echo "⚠️ **Warning:** Failed to set repository variable" | gh issue comment "${{ github.event.issue.number }}" --body-file -
              SECRETS_SUCCESS=false
            fi
          else
            echo "⚠️ **Warning:** Unable to set repository variable. Please set INITIALIZATION_COMPLETE=true manually in Settings → Secrets and variables → Actions → Variables." | gh issue comment "${{ github.event.issue.number }}" --body-file -
            SECRETS_SUCCESS=false
          fi
          
          echo "SECRETS_SUCCESS=$SECRETS_SUCCESS" >> $GITHUB_ENV

      - name: Configure branch protection
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
        run: |
          BRANCH_PROTECTION_SUCCESS=true
          
          # Try to create branch protection rules
          if [ -n "$GH_TOKEN" ]; then
            # Use PAT for branch protection
            for branch in main fork_upstream fork_integration; do
              if ! GH_TOKEN=$GH_TOKEN gh api \
                --method PUT \
                -H "Accept: application/vnd.github.v3+json" \
                "/repos/${{ github.repository }}/branches/$branch/protection" \
                --input - << 'EOF'
          {
            "required_status_checks": {
              "strict": true,
              "contexts": []
            },
            "enforce_admins": false,
            "required_pull_request_reviews": {
              "required_approving_review_count": 1,
              "dismiss_stale_reviews": true
            },
            "restrictions": null,
            "allow_force_pushes": false,
            "allow_deletions": false
          }
          EOF
              then
                echo "⚠️ Failed to protect branch $branch"
                BRANCH_PROTECTION_SUCCESS=false
              fi
            done
          else
            echo "⚠️ **Warning:** Unable to set branch protection rules. Please configure manually or provide a GH_TOKEN secret with appropriate permissions." | gh issue comment "${{ github.event.issue.number }}" --body-file -
            echo "To set up branch protection manually, go to Settings → Branches for each of: main, fork_upstream, fork_integration" | gh issue comment "${{ github.event.issue.number }}" --body-file -
            BRANCH_PROTECTION_SUCCESS=false
          fi
          
          echo "BRANCH_PROTECTION_SUCCESS=$BRANCH_PROTECTION_SUCCESS" >> $GITHUB_ENV

      - name: Enable security features
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
        run: |
          SECURITY_SUCCESS=true
          
          # Enable security features if possible
          if [ -f .github/security-on.json ]; then
            if [ -n "$GH_TOKEN" ]; then
              if ! GH_TOKEN=$GH_TOKEN gh api \
                --method PATCH \
                -H "Accept: application/vnd.github.v3+json" \
                "/repos/${{ github.repository }}" \
                --input .github/security-on.json; then
                echo "⚠️ Some security features may require manual configuration"
                SECURITY_SUCCESS=false
              fi
            else
              echo "⚠️ **Note:** Security features require manual configuration. Go to Settings → Security & analysis" | gh issue comment "${{ github.event.issue.number }}" --body-file -
              SECURITY_SUCCESS=false
            fi
          fi
          
          echo "SECURITY_SUCCESS=$SECURITY_SUCCESS" >> $GITHUB_ENV

      - name: Update README status
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Update README to remove initialization status if it still exists
          git pull origin main
          if grep -q "Repository Status: Initialization Required" README.md; then
            # Remove the initialization status section
            sed -i '/## 🔄 Repository Status: Initialization Required/,/---/d' README.md
            
            git add README.md
            git commit -m "docs: remove initialization status from README"
            git push origin main
          fi
          
          # Build completion message based on actual success/failure
          if [ "$BRANCH_PROTECTION_SUCCESS" = "true" ]; then
            PROTECTION_STATUS="✅ **Branch Protection:** All branches are protected with PR requirements"
          else
            PROTECTION_STATUS="⚠️ **Branch Protection:** Requires manual setup"
          fi
          
          if [ "$SECRETS_SUCCESS" = "true" ]; then
            SECRET_STATUS="✅ **Repository Secrets:** UPSTREAM_REPO_URL configured"
          else
            SECRET_STATUS="⚠️ **Repository Secrets:** Requires manual setup"  
          fi
          
          if [ "$SECURITY_SUCCESS" = "true" ]; then
            SECURITY_STATUS="✅ **Security Features:** Secret scanning and dependency updates enabled"
          else
            SECURITY_STATUS="⚠️ **Security Features:** Requires manual setup"
          fi
          
          # Only show manual steps if something actually failed
          MANUAL_STEPS=""
          if [ "$BRANCH_PROTECTION_SUCCESS" != "true" ] || [ "$SECRETS_SUCCESS" != "true" ] || [ "$SECURITY_SUCCESS" != "true" ]; then
            MANUAL_STEPS="
          ## Manual Configuration Required
          
          Some features require manual setup:"
            
            if [ "$BRANCH_PROTECTION_SUCCESS" != "true" ]; then
              MANUAL_STEPS="$MANUAL_STEPS
          - **Branch Protection:** Go to Settings → Branches for each of: main, fork_upstream, fork_integration"
            fi
            
            if [ "$SECRETS_SUCCESS" != "true" ]; then
              MANUAL_STEPS="$MANUAL_STEPS
          - **Repository Secrets:** Set UPSTREAM_REPO_URL in Settings → Secrets and variables → Actions"
            fi
            
            if [ "$SECURITY_SUCCESS" != "true" ]; then
              MANUAL_STEPS="$MANUAL_STEPS
          - **Security Features:** Enable in Settings → Security & analysis"
            fi
          fi
          
          cat << EOF | gh issue comment "${{ github.event.issue.number }}" --body-file -
          🎉 **Initialization Complete!**

          Your fork management repository is now ready! Here is what was set up:

          ✅ **Branch Structure:**
          - \`main\` - Your stable development branch
          - \`fork_upstream\` - Tracks upstream changes
          - \`fork_integration\` - Integration and conflict resolution

          $PROTECTION_STATUS

          ✅ **Upstream Connection:** Connected to \`${{ needs.validate_and_setup.outputs.upstream_repo }}\`

          ✅ **Automated Workflows:** Sync, validation, and release workflows are active

          ✅ **Template Cleanup:** Removed template documentation (upstream README will be used)

          $SECRET_STATUS

          $SECURITY_STATUS

          $MANUAL_STEPS

          ## Next Steps

          1. **Review the workflows** in the Actions tab
          2. **Customize the README** with your project-specific information  
          3. **Start developing** by creating feature branches from \`main\`
          4. **Sync with upstream** will happen automatically via the sync workflow

          **Happy coding!** 🚀
          EOF
          
          # Close the initialization issue
          gh issue close "${{ github.event.issue.number }}" --reason completed