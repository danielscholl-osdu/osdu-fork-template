name: Sync Upstream

on:
  schedule:
    - cron: '0 0 * * *'  # Run daily at midnight
  workflow_dispatch:      # Allow manual trigger

jobs:
  Sync:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      issues: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GH_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          
      - name: Install Security Tools
        run: |
          # Install Trivy
          echo "Installing Trivy..."
          curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b /usr/local/bin v0.49.1
          
          # Install Claude Code
          echo "Installing Claude Code..."
          npm install -g @anthropic-ai/claude-code
          
          # Create .mcp.json in the repository root for Claude
          cat > .mcp.json << 'EOF'
          {
            "mcpServers": {
              "mvn-mcp-server": {
                "type": "stdio",
                "command": "uvx",
                "args": [
                  "--from",
                  "git+https://github.com/danielscholl-osdu/mvn-mcp-server@main",
                  "mvn-mcp-server"
                ],
                "env": {}
              }
            }
          }
          EOF
          
          echo "Claude Code installed and MCP configured"

      - name: Setup Python and PR Generator
        run: |
          python -m pip install --upgrade pip
          pip install pr-generator-agent

      - name: Configure Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          # Create a global exclude file to prevent .mcp.json from being tracked
          echo ".mcp.json" > ~/.gitignore_global
          git config core.excludesfile ~/.gitignore_global

          # Add upstream remote using stored secret
          git remote add upstream "${{ secrets.UPSTREAM_REPO_URL }}"

      - name: Fetch Upstream
        run: |
          # Fetch latest from upstream
          git fetch upstream --prune

          # Determine default branch
          if git rev-parse --verify upstream/main >/dev/null 2>&1; then
            DEFAULT_BRANCH="main"
          elif git rev-parse --verify upstream/master >/dev/null 2>&1; then
            DEFAULT_BRANCH="master"
          else
            echo "::error::Could not find main or master branch in upstream"
            exit 1
          fi
          echo "DEFAULT_BRANCH=$DEFAULT_BRANCH" >> $GITHUB_ENV

      - name: Create Pull Request
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
          AZURE_API_KEY: ${{ secrets.AZURE_API_KEY }}
          AZURE_API_BASE: ${{ secrets.AZURE_API_BASE }}
          AZURE_API_VERSION: ${{ secrets.AZURE_API_VERSION }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: |
          # Generate branch names with timestamp for uniqueness
          DATE_SUFFIX=$(date +%Y%m%d-%H%M%S)
          SYNC_BRANCH="sync/upstream-${DATE_SUFFIX}"
          
          # Fetch and checkout fork_upstream branch
          git fetch origin fork_upstream
          git checkout -b fork_upstream origin/fork_upstream

          # Create a new branch for the sync
          git checkout -b $SYNC_BRANCH
          
          # Try to merge upstream changes, automatically preferring upstream versions on conflict
          git merge upstream/$DEFAULT_BRANCH -X theirs --no-edit
          
          # Check if there are any changes to commit
          if git diff --quiet fork_upstream; then
            echo "No changes to sync from upstream"
            exit 0
          fi
          
          # Push changes with force flag to handle any branch name conflicts
          git push -f origin $SYNC_BRANCH

          # Get upstream version for PR description
          UPSTREAM_VERSION=$(git describe --tags --abbrev=0 upstream/$DEFAULT_BRANCH 2>/dev/null || echo "latest")
          
          # Get the changes for the PR description
          CHANGES=$(git log --pretty=format:"* %s" fork_upstream..$SYNC_BRANCH)
          
          # Prepare fallback description for PR
          FALLBACK_DESCRIPTION="Automated PR to sync with upstream repository changes."$'\n\n'"### Changes from upstream:"$'\n'"${CHANGES}"
          echo "FALLBACK_DESCRIPTION<<EOF" >> $GITHUB_ENV
          echo "$FALLBACK_DESCRIPTION" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
          
      - name: Create enhanced sync PR
        id: create-pr
        uses: ./.github/actions/create-enhanced-pr
        with:
          github-token: ${{ secrets.GH_TOKEN }}
          base-branch: fork_upstream
          head-branch: ${{ env.SYNC_BRANCH }}
          pr-title: "‚¨ÜÔ∏è Sync with upstream ${{ env.UPSTREAM_VERSION }}"
          fallback-description: ${{ env.FALLBACK_DESCRIPTION }}
          anthropic-api-key: ${{ secrets.ANTHROPIC_API_KEY }}
          azure-api-key: ${{ secrets.AZURE_API_KEY }}
          azure-api-base: ${{ secrets.AZURE_API_BASE }}
          azure-api-version: ${{ secrets.AZURE_API_VERSION }}
          openai-api-key: ${{ secrets.OPENAI_API_KEY }}
          target-branch-for-aipr: fork_upstream
          use-vulns-flag: 'true'

      - name: Create linked issue and update PR
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
        run: |
          PR_URL="${{ steps.create-pr.outputs.pr-url }}"
          PR_NUMBER="${{ steps.create-pr.outputs.pr-number }}
          echo "PR number: $PR_NUMBER"
            
          # Create a linked issue with basic content
          echo "Creating linked issue for PR #$PR_NUMBER"
          ISSUE_URL=$(gh issue create \
            --title "üîÑ Upstream Sync - $(date +%Y-%m-%d)" \
            --body "This issue tracks the upstream sync PR #$PR_NUMBER and will close automatically when the PR is merged." \
            --label "sync-update")
          
          # Extract issue number and update PR to close the issue
          ISSUE_NUMBER=$(basename $ISSUE_URL)
          echo "Issue number: $ISSUE_NUMBER"
          
          # Update the PR body to include issue closure
          UPDATED_PR_BODY="${PR_DESCRIPTION}

          Closes #$ISSUE_NUMBER"
          
          gh pr edit $PR_NUMBER --body "$UPDATED_PR_BODY"

      - name: Handle Failure
        if: failure()
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
        run: |
          ISSUE_BODY="The automated upstream sync workflow failed.

          ### Error Details
          Please check the workflow logs for more information:
          ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}

          ### Manual Steps Required
          1. Review the error logs
          2. Resolve any conflicts
          3. Re-run the sync workflow

          @${{ github.repository_owner }}"

          gh issue create \
            --title "üîÑ Upstream Sync Failed $(date +%Y-%m-%d)" \
            --body "$ISSUE_BODY" \
            --label "sync-failed"